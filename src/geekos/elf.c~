/*
 * ELF executable loading
 * Copyright (c) 2003, Jeffrey K. Hollingsworth <hollings@cs.umd.edu>
 * Copyright (c) 2003, David H. Hovemeyer <daveho@cs.umd.edu>
 * $Revision: 1.29 $
 * 
 * This is free software.  You are permitted to use,
 * redistribute, and modify it as specified in the file "COPYING".
 */

#include <geekos/errno.h>
#include <geekos/kassert.h>
#include <geekos/ktypes.h>
#include <geekos/screen.h>  /* for debug Print() statements */
#include <geekos/pfat.h>
#include <geekos/malloc.h>
#include <geekos/string.h>
#include <geekos/elf.h>


/**
 * From the data of an ELF executable, determine how its segments
 * need to be loaded into memory.
 * @param exeFileData buffer containing the executable file
 * @param exeFileLength length of the executable file in bytes
 * @param exeFormat structure describing the executable's segments
 *   and entry address; to be filled in
 * @return 0 if successful, < 0 on error
 */

int Parse_ELF_Executable(char *exeFileData, ulong_t exeFileLength,
    struct Exe_Format *exeFormat)
{
	
    //TODO("Parse an ELF executable image");
	/*利用ELF头部结构体指向可执行文件头部，便于获取相关信息*/
	elfHeader *ehdr = (elfHeader*)exeFileData;

	/*错误处理*/
	/*ELF文件格式不正确：文件长度不足或非ELF格式文件（应以“、x7F“＋”ELF“为前四个字符）*/
	if (exeFileLength < sizeof(elfHeader) || strncmp(exeFileData, "\x7F""ELF", 4) != 0)
	{
	Print("Error! Not an ELF executable!\n");
	return ENOEXEC;
	}

	
	/*超过系统允许的最大总段数*/
	if (ehdr->phnum > EXE_MAX_SEGMENTS)
	{
	Print("Error! Too many segments (%d) in ELF executable\n", ehdr->phnum);
	return ENOEXEC;
	}

	
	/*ELF文件不完整：缺少必要的program header部分*/
	if (exeFileLength < ehdr->phoff + (ehdr->phnum * sizeof(programHeader)))
	{
	Print("Not enough room for program header\n");
	return ENOEXEC;
	}

	
	/*获取程序头部表入口数量*/
	exeFormat->numSegments = ehdr->phnum;
	
	/*获取代码入口点地址*/
	exeFormat->entryAddr = ehdr->entry;

	/*获取头部表在文件中的位置，便于读取信息*/
	programHeader *phdr = (programHeader*)(exeFileData + ehdr->phoff);

	/*填充数据段的相关内容*/
	unsigned int i;
	/*指针每次移动一个programHeader结构体的长度*/
	for(i = 0; i < exeFormat->numSegments; i++, phdr++)
	{
		struct Exe_Segment *segment = &exeFormat->segmentList[i];
		/*获取该段在文件中的偏移量*/
		segment->offsetInFile = phdr->offset;
		/*获取该段的数据在文件中的长度*/
		segment->lengthInFile = phdr->fileSize;
		/*获取该段在用户内存中的起始地址*/
		segment->startAddress = phdr->vaddr;
		/*获取该段在内存中的大小*/
		segment->sizeInMemory = phdr->memSize;
		/*获取该段的保护标志位*/
		segment->protFlags = phdr->flags;
		
		/*错误处理*/
		/*文件中存储的数据段大小超过标识的内存占用容量*/
		if(segment->lengthInFile > segment->sizeInMemory)
		{
			Print("Segment %d:length in file (%lu) exceeds size in memory (%lu)\n", i, segment->lengthInFile, segment->sizeInMemory);
			return ENOEXEC;
		}
	}
	
	/*执行正常返回0*/
	return 0;
}


